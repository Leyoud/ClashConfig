script:
  code: |-
    def main(ctx,metadata):

      if ctx.rule_providers["Lan"].match(metadata):
        return "DIRECT"

      if ctx.rule_providers["ProcessNameDirectlist"].match(metadata):
        return "DIRECT"

      if ctx.rule_providers["Advertising"].match(metadata):
        return "🆎 全球拦截"

      if ctx.rule_providers["AdvertisingAppend"].match(metadata):
        return "🆎 全球拦截"

      if ctx.rule_providers["ChinaDirectlist"].match(metadata):
        return "🎯 全球直连"

      if ctx.rule_providers["GoogleCN"].match(metadata):
        return "🎯 全球直连"

      if ctx.rule_providers["SteamCN"].match(metadata):
        return "🎯 全球直连"

      if ctx.rule_providers["AmazonCN"].match(metadata):
        return "🎯 全球直连"

      if ctx.rule_providers["Telegram"].match(metadata):
        return "📲 电报消息"

      if ctx.rule_providers["YouTube"].match(metadata):
        return "📹 油管视频"

      if ctx.rule_providers["TikTok"].match(metadata):
        return "📱 国际抖音"

      if ctx.rule_providers["Spotify"].match(metadata):
        return "🎵 Spotify"

      if ctx.rule_providers["Amazon"].match(metadata):
        return "🛒 亚马逊商城"

      if ctx.rule_providers["PayPal"].match(metadata):
        return "🍃 PayPal"

      if ctx.rule_providers["Chatgpt"].match(metadata):
        return "🤖 Chatgpt"

      if ctx.rule_providers["Disney"].match(metadata):
        return "🎥 迪士尼Plus"

      if ctx.rule_providers["Netflix"].match(metadata):
        return "🎥 奈飞视频"

      if ctx.rule_providers["Bahamut"].match(metadata):
        return "✳️ 巴哈姆特"

      if ctx.rule_providers["GlobalMedia"].match(metadata):
        return "🌍 国外媒体"

      if ctx.rule_providers["Speedtest"].match(metadata):
        return "⚡️ 测速平台"

      if ctx.rule_providers["Microsoft"].match(metadata):
        return "Ⓜ️ 微软服务"

      if ctx.rule_providers["Apple"].match(metadata):
        return "🍎 苹果服务"

      if ctx.rule_providers["GoogleFCM"].match(metadata):
        return "📢 谷歌FCM"

      if ctx.rule_providers["BilibiliHMT"].match(metadata):
        return "📺 哔哩哔哩"

      if ctx.rule_providers["iQIYIIntl"].match(metadata):
        return "📺 爱奇艺"

      if ctx.rule_providers["NeteaseMusic"].match(metadata):
        return "🎶 网易音乐"

      if ctx.rule_providers["GlobalMedia"].match(metadata):
        return "🌏 国内媒体"

      if ctx.rule_providers["Epic"].match(metadata):
        return "🎮 游戏平台"

      if ctx.rule_providers["Sony"].match(metadata):
        return "🎮 游戏平台"

      if ctx.rule_providers["Steam"].match(metadata):
        return "🎮 游戏平台"

      if ctx.rule_providers["Origin"].match(metadata):
        return "🎮 游戏平台"

      if ctx.rule_providers["Nintendo"].match(metadata):
        return "🎮 游戏平台"

      if ctx.rule_providers["GlobalProxylist"].match(metadata):
        return "🚀 代理服务"

      if ctx.rule_providers["Global"].match(metadata):
        return "🚀 代理服务"

      if ctx.rule_providers["China"].match(metadata):
        return "🎯 全球直连"

      if ctx.rule_providers["ChinaIPs"].match(metadata):
        return "🎯 全球直连,no-resolve"

      if ctx.rule_providers["Download"].match(metadata):
        return "🎯 全球直连"

      ip = metadata["dst_ip"]

      if ip == "":
        ip = ctx.resolve_ip(metadata["host"])

      if ctx.geoip(ip) == "CN":
        return "🎯 全球直连"

      return "🐟 漏网之鱼"